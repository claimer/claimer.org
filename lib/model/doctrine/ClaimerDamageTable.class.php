<?php

/**
 * ClaimerDamageTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ClaimerDamageTable extends Doctrine_Table
{
  /**
   * Returns an instance of this class.
   *
   * @return object ClaimerDamageTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('ClaimerDamage');
  }
  
  public function getDamagesQuery()
  {
    $q = $this->createQuery('d')
              ->leftJoin('d.Claimant c')
              ->leftJoin('c.Profile p')
              ->leftJoin('p.Manager m')
              ->leftJoin('d.Type dt')
              ->leftJoin('d.Cause dc')
              ->leftJoin('d.Where dw')
              ->leftJoin('d.Value dv');
    
    return $q;
  }
  
  public function getDamages()
  {
    return $this->getDamagesQuery()
                ->execute();
  }
  
  public function getDamagesByTypeQuery(Doctrine_Query $q)
  {
    return $q->select('count(d.id) as dcount, d.id, dt.name as dtname')
             ->groupBy('dt.id');
  }
  
  public function getDamagesByTypeForQuery(Doctrine_Query $q)
  {
    $damageTypes = $this->getDamagesByTypeQuery(clone $q)
                        ->execute();
    
    $data = array();
    
    foreach ($damageTypes as $damageType)
    {
      $data[$damageType['dtname']] = (int) $damageType['dcount'];
    }
    
    return $data;
  }
  
  public function getDamagesTotalQuery(Doctrine_Query $q)
  {
    return $q->select('SUM(dv.value) as total_value');
  }
  
  public function getDamagesTotalForQuery(Doctrine_Query $q)
  {
    $totalValue = $this->getDamagesTotalQuery(clone $q)
                       ->fetchOne();
    
    if (! isset($totalValue['total_value']))
    {
      return 0;
    }
    
    return $totalValue['total_value'];
  }
  
  public function getGrantedUsersDamagesQuery($grants)
  {
    $groups = Doctrine_Core::getTable('sfGuardGroup')->getGroupsName();
    $groups = array_diff($groups, $grants);
    
    $q = $this->getDamagesQuery();
    
    $subQuery = Doctrine_Core::getTable('sfGuardUser')->createQuery('u')
                                                      ->select('u.id')
                                                      ->innerJoin('u.Groups ug')
                                                      ->whereIn('ug.name', $groups);
    
    $q->where('c.id NOT IN ('.$subQuery->getDql().')', $groups);
    
    return $q;
  }
  
  public function getDamagesByManagerIdQuery($managerId)
  {
    $q = $this->getDamagesQuery()
              ->addWhere('p.manager_id = ? OR d.claimant_id = ?', array($managerId, $managerId));
    
    return $q;
  }
    
  public function getDamagesByManagerId($managerId)
  {
    return $this->getDamagesByManagerIdQuery($managerId)
                ->execute();
  }
  
  public function getDamagesByClaimantIdQuery($claimantId)
  {
    $q = $this->getDamagesQuery()
              ->where('c.id = ?', $claimantId);
    
    return $q;
  }
  
  public function getDamagesByClaimantId($claimantId)
  {
    return $this->getDamagesByClaimantIdQuery($claimantId)
                ->execute();
  }
  
  public function getNbDamagesByClaimant($claimantId)
  {
    return $this->createQuery('d')
                ->where('d.claimant_id = ?', $claimantId)
                ->count();
  }
  
  public function getNbDamagesByClaimantAndType($claimantId, $type)
  {       
    return $this->createQuery('d')
              ->where('d.claimant_id = ?', $claimantId)
              ->andWhere('d.type_id = ?', $type)
              ->count();
  }
  
  public function getNbCreatedDamagesByClaimantAndType($claimantId, $type)
  {       
    $q = $this->createQuery('d')
      ->select('d.validationcode')
      ->where('d.claimant_id = ?', $claimantId)
      ->andWhere('d.type_id = ?', $type)
      ->orderBy('d.id DESC')
      ->limit(1);
    
    $result = $q->fetchOne();
    
    if ($result &&
        $value = preg_match(
          '/(\d+)-(\d+)-(\d+)-(\w)-(?<number>\d+)/',
          $result['validationcode'],
          $matches))
    {
      return ($matches['number']);
    }
    
    return 0;
  }
  
  public function updateImportanceSortByClaimant($importance, $claimantId)
  {
    $q = $this->createQuery()
      ->update()
      ->set('importance', 'importance - 1')
      ->where('importance > ?', $importance)
      ->andWhere('claimant_id = ?', $claimantId)
      ->execute();
  }
}
