<?php

/**
 * BaseClaimerDamage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $validationcode
 * @property integer $importance
 * @property integer $type_id
 * @property integer $cause_id
 * @property string $cause_other
 * @property string $description
 * @property timestamp $occurred_at
 * @property integer $address_id
 * @property integer $value_id
 * @property string $story
 * @property integer $claimant_id
 * @property integer $created_by
 * @property integer $updated_by
 * @property ClaimerDamageType $Type
 * @property ClaimerCause $Cause
 * @property ClaimerValue $Value
 * @property ClaimerAddress $Where
 * @property sfGuardUser $Claimant
 * @property sfGuardUser $CreatedBy
 * @property sfGuardUser $UpdatedBy
 * @property ClaimerRealestate $ClaimerRealestate
 * @property ClaimerMovableobject $ClaimerMovableobject
 * @property ClaimerBusiness $ClaimerBusiness
 * @property ClaimerPerson $ClaimerPerson
 * @property ClaimerCattle $ClaimerCattle
 * @property ClaimerHarvest $ClaimerHarvest
 * @property ClaimerOtherloss $ClaimerOtherloss
 * @property Doctrine_Collection $Coowners
 * @property Doctrine_Collection $Documents
 * 
 * @method string               getValidationcode()       Returns the current record's "validationcode" value
 * @method integer              getImportance()           Returns the current record's "importance" value
 * @method integer              getTypeId()               Returns the current record's "type_id" value
 * @method integer              getCauseId()              Returns the current record's "cause_id" value
 * @method string               getCauseOther()           Returns the current record's "cause_other" value
 * @method string               getDescription()          Returns the current record's "description" value
 * @method timestamp            getOccurredAt()           Returns the current record's "occurred_at" value
 * @method integer              getAddressId()            Returns the current record's "address_id" value
 * @method integer              getValueId()              Returns the current record's "value_id" value
 * @method string               getStory()                Returns the current record's "story" value
 * @method integer              getClaimantId()           Returns the current record's "claimant_id" value
 * @method integer              getCreatedBy()            Returns the current record's "created_by" value
 * @method integer              getUpdatedBy()            Returns the current record's "updated_by" value
 * @method ClaimerDamageType    getType()                 Returns the current record's "Type" value
 * @method ClaimerCause         getCause()                Returns the current record's "Cause" value
 * @method ClaimerValue         getValue()                Returns the current record's "Value" value
 * @method ClaimerAddress       getWhere()                Returns the current record's "Where" value
 * @method sfGuardUser          getClaimant()             Returns the current record's "Claimant" value
 * @method sfGuardUser          getCreatedBy()            Returns the current record's "CreatedBy" value
 * @method sfGuardUser          getUpdatedBy()            Returns the current record's "UpdatedBy" value
 * @method ClaimerRealestate    getClaimerRealestate()    Returns the current record's "ClaimerRealestate" value
 * @method ClaimerMovableobject getClaimerMovableobject() Returns the current record's "ClaimerMovableobject" value
 * @method ClaimerBusiness      getClaimerBusiness()      Returns the current record's "ClaimerBusiness" value
 * @method ClaimerPerson        getClaimerPerson()        Returns the current record's "ClaimerPerson" value
 * @method ClaimerCattle        getClaimerCattle()        Returns the current record's "ClaimerCattle" value
 * @method ClaimerHarvest       getClaimerHarvest()       Returns the current record's "ClaimerHarvest" value
 * @method ClaimerOtherloss     getClaimerOtherloss()     Returns the current record's "ClaimerOtherloss" value
 * @method Doctrine_Collection  getCoowners()             Returns the current record's "Coowners" collection
 * @method Doctrine_Collection  getDocuments()            Returns the current record's "Documents" collection
 * @method ClaimerDamage        setValidationcode()       Sets the current record's "validationcode" value
 * @method ClaimerDamage        setImportance()           Sets the current record's "importance" value
 * @method ClaimerDamage        setTypeId()               Sets the current record's "type_id" value
 * @method ClaimerDamage        setCauseId()              Sets the current record's "cause_id" value
 * @method ClaimerDamage        setCauseOther()           Sets the current record's "cause_other" value
 * @method ClaimerDamage        setDescription()          Sets the current record's "description" value
 * @method ClaimerDamage        setOccurredAt()           Sets the current record's "occurred_at" value
 * @method ClaimerDamage        setAddressId()            Sets the current record's "address_id" value
 * @method ClaimerDamage        setValueId()              Sets the current record's "value_id" value
 * @method ClaimerDamage        setStory()                Sets the current record's "story" value
 * @method ClaimerDamage        setClaimantId()           Sets the current record's "claimant_id" value
 * @method ClaimerDamage        setCreatedBy()            Sets the current record's "created_by" value
 * @method ClaimerDamage        setUpdatedBy()            Sets the current record's "updated_by" value
 * @method ClaimerDamage        setType()                 Sets the current record's "Type" value
 * @method ClaimerDamage        setCause()                Sets the current record's "Cause" value
 * @method ClaimerDamage        setValue()                Sets the current record's "Value" value
 * @method ClaimerDamage        setWhere()                Sets the current record's "Where" value
 * @method ClaimerDamage        setClaimant()             Sets the current record's "Claimant" value
 * @method ClaimerDamage        setCreatedBy()            Sets the current record's "CreatedBy" value
 * @method ClaimerDamage        setUpdatedBy()            Sets the current record's "UpdatedBy" value
 * @method ClaimerDamage        setClaimerRealestate()    Sets the current record's "ClaimerRealestate" value
 * @method ClaimerDamage        setClaimerMovableobject() Sets the current record's "ClaimerMovableobject" value
 * @method ClaimerDamage        setClaimerBusiness()      Sets the current record's "ClaimerBusiness" value
 * @method ClaimerDamage        setClaimerPerson()        Sets the current record's "ClaimerPerson" value
 * @method ClaimerDamage        setClaimerCattle()        Sets the current record's "ClaimerCattle" value
 * @method ClaimerDamage        setClaimerHarvest()       Sets the current record's "ClaimerHarvest" value
 * @method ClaimerDamage        setClaimerOtherloss()     Sets the current record's "ClaimerOtherloss" value
 * @method ClaimerDamage        setCoowners()             Sets the current record's "Coowners" collection
 * @method ClaimerDamage        setDocuments()            Sets the current record's "Documents" collection
 * 
 * @package    claimer
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseClaimerDamage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('claimer_damage');
        $this->hasColumn('validationcode', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('importance', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('cause_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('cause_other', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('occurred_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));
        $this->hasColumn('address_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('value_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('story', 'string', 10000, array(
             'type' => 'string',
             'length' => 10000,
             ));
        $this->hasColumn('claimant_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('created_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('updated_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));


        $this->index('importance', array(
             'fields' => 'importance',
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'INNODB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('ClaimerDamageType as Type', array(
             'local' => 'type_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('ClaimerCause as Cause', array(
             'local' => 'cause_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('ClaimerValue as Value', array(
             'local' => 'value_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasOne('ClaimerAddress as Where', array(
             'local' => 'address_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT',
             'cascade' => array(
             0 => 'delete',
             )));

        $this->hasOne('sfGuardUser as Claimant', array(
             'local' => 'claimant_id',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('sfGuardUser as CreatedBy', array(
             'local' => 'created_by',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('sfGuardUser as UpdatedBy', array(
             'local' => 'updated_by',
             'foreign' => 'id',
             'onDelete' => 'RESTRICT'));

        $this->hasOne('ClaimerRealestate', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerMovableobject', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerBusiness', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerPerson', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerCattle', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerHarvest', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasOne('ClaimerOtherloss', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasMany('ClaimerCoowner as Coowners', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $this->hasMany('ClaimerDocument as Documents', array(
             'local' => 'id',
             'foreign' => 'damage_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}